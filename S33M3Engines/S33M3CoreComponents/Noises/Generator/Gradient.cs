using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using S33M3CoreComponents.Noises.Interfaces;
using S33M3CoreComponents.Noises.Generator;
using S33M3_Resources.Structs;
using S33M3CoreComponents.Maths;

namespace S33M3CoreComponents.Noises.Generator
{
    /// <summary>
    /// Gradiant value around on axis generator
    /// </summary>
    public class Gradient : INoise2, INoise3
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();

        #region Private variables
        private enuAxis _axisGradient;
        private Range _axisRangeValue = new Range(0, 1);
        private Range _outputRangeValue = new Range(-1, 1);
        #endregion

        #region Public variables
        /// <summary>
        /// The axis around wich the gradient is being made
        /// </summary>
        public enuAxis AxisGradient
        {
            get { return _axisGradient; }
            set { _axisGradient = value; }
        }
        /// <summary>
        /// The value generated by this generator are between this range Min and Max value
        /// </summary>
        public Range OutputRangeValue
        {
            get { return _outputRangeValue; }
            set { _outputRangeValue = value; }
        }

        /// <summary>
        /// The Axis choosen range of value that will be use for the gradient
        /// The Min value will output the OutputRangeValue.Min value
        /// The Max value will output the OutputRangeValue.Max value
        /// </summary>
        public Range AxisRangeValue
        {
            get { return _axisRangeValue; }
            set { _axisRangeValue = value; }
        }
        #endregion

        /// <summary>
        /// Create a component that will generate gradient values around a single Axis (no matter the value of the other passed in value)
        /// </summary>
        /// <param name="axisGradient"></param>
        /// <param name="axisRangeValue">
        /// The Axis choosen range of value that will be use for the gradient
        /// The Min value will output the OutputRangeValue.Min value
        /// The Max value will output the OutputRangeValue.Max value
        /// </param>
        public Gradient(enuAxis axisGradient, Range axisRangeValue)
        {
            _axisGradient = axisGradient;
            _axisRangeValue = axisRangeValue;
        }

        #region Public methods
        /// <summary>
        /// Generate a Float based on the input
        /// The result will be between OutputRangeValue
        /// </summary>
        /// <param name="x">X value</param>
        /// <param name="z">Z value</param>
        /// <returns></returns>
        public float GetValue(float x, float z)
        {
            switch (_axisGradient)
            {
                case enuAxis.X:
                    return MathHelper.FullLerp(_outputRangeValue.Min, _outputRangeValue.Max, _axisRangeValue.Min, _axisRangeValue.Max, x, true);
                case enuAxis.Y:
                    return MathHelper.FullLerp(_outputRangeValue.Min, _outputRangeValue.Max, _axisRangeValue.Min, _axisRangeValue.Max, z, true);
                default:
                    logger.Error("AxisGradient {0} not supported with INoise2D GetValue()", _axisGradient.ToString());
                    throw new Exception();
            }
        }
        
        /// <summary>
        /// Generate a Float based on the input
        /// The result will be between OutputRangeValue
        /// </summary>
        /// <param name="x">X value</param>
        /// <param name="y">Y value</param>
        /// <param name="z">Z value</param>
        /// <returns></returns>
        public float GetValue(float x, float y, float z)
        {
            switch (_axisGradient)
            {
                case enuAxis.X:
                    return MathHelper.FullLerp(_outputRangeValue.Min, _outputRangeValue.Max, _axisRangeValue.Min, _axisRangeValue.Max, x, true);
                case enuAxis.Y:
                    return MathHelper.FullLerp(_outputRangeValue.Min, _outputRangeValue.Max, _axisRangeValue.Min, _axisRangeValue.Max, y, true);
                case enuAxis.Z:
                    return MathHelper.FullLerp(_outputRangeValue.Min, _outputRangeValue.Max, _axisRangeValue.Min, _axisRangeValue.Max, z, true);
                default:
                    logger.Error("AxisGradient {0} not supported with INoise3D GetValue()", _axisGradient.ToString());
                    throw new Exception();
            }
        }
        #endregion

        #region Private methods
        #endregion
    }
}
