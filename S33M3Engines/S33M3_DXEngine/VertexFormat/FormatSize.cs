using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SharpDX.DXGI;

namespace S33M3_DXEngine.VertexFormat
{
    public static class FormatSize
    {
        public static int GetFormatSize(Format VertexElementFormat)
        {
            switch (VertexElementFormat)
            {
                case Format.A8_UNorm:
                    return 1;
                case Format.B5G5R5A1_UNorm:
                    return 2;
                case Format.B5G6R5_UNorm:
                    return 2;
                case Format.B8G8R8A8_Typeless:
                    return 4;
                case Format.B8G8R8A8_UNorm:
                    return 4;
                case Format.B8G8R8A8_UNorm_SRgb:
                    return 4;
                case Format.B8G8R8X8_Typeless:
                    return 4;
                case Format.B8G8R8X8_UNorm:
                    return 4;
                case Format.B8G8R8X8_UNorm_SRgb:
                    return 4;
                case Format.D16_UNorm:
                    return 2;
                case Format.D24_UNorm_S8_UInt:
                    return 4;
                case Format.D32_Float:
                    return 4;
                case Format.D32_Float_S8X24_UInt:
                    return 4;
                case Format.G8R8_G8B8_UNorm:
                    return 4;
                case Format.R10G10B10A2_Typeless:
                    return 4;
                case Format.R10G10B10A2_UInt:
                    return 4;
                case Format.R10G10B10A2_UNorm:
                    return 4;
                case Format.R10G10B10_Xr_Bias_A2_UNorm:
                    return 4;
                case Format.R11G11B10_Float:
                    return 4;
                case Format.R16G16B16A16_Float:
                    return 8;
                case Format.R16G16B16A16_SInt:
                    return 8;
                case Format.R16G16B16A16_SNorm:
                    return 8;
                case Format.R16G16B16A16_Typeless:
                    return 8;
                case Format.R16G16B16A16_UInt:
                    return 8;
                case Format.R16G16B16A16_UNorm:
                    return 8;
                case Format.R16G16_Float:
                    return 4;
                case Format.R16G16_SInt:
                    return 4;
                case Format.R16G16_SNorm:
                    return 4;
                case Format.R16G16_Typeless:
                    return 4;
                case Format.R16G16_UInt:
                    return 4;
                case Format.R16G16_UNorm:
                    return 4;
                case Format.R16_Float:
                    return 2;
                case Format.R16_SInt:
                    return 2;
                case Format.R16_SNorm:
                    return 2;
                case Format.R16_Typeless:
                    return 2;
                case Format.R16_UInt:
                    return 2;
                case Format.R16_UNorm:
                    return 2;
                case Format.R24G8_Typeless:
                    return 4;
                case Format.R24_UNorm_X8_Typeless:
                    return 4;
                case Format.R32G32B32A32_Float:
                    return 16;
                case Format.R32G32B32A32_SInt:
                    return 16;
                case Format.R32G32B32A32_Typeless:
                    return 16;
                case Format.R32G32B32A32_UInt:
                    return 16;
                case Format.R32G32B32_Float:
                    return 12;
                case Format.R32G32B32_SInt:
                    return 12;
                case Format.R32G32B32_Typeless:
                    return 12;
                case Format.R32G32B32_UInt:
                    return 12;
                case Format.R32G32_Float:
                    return 8;
                case Format.R32G32_SInt:
                    return 8;
                case Format.R32G32_Typeless:
                    return 8;
                case Format.R32G32_UInt:
                    return 8;
                case Format.R32G8X24_Typeless:
                    return 8;
                case Format.R32_Float:
                    return 4;
                case Format.R32_Float_X8X24_Typeless:
                    return 4;
                case Format.R32_SInt:
                    return 4;
                case Format.R32_Typeless:
                    return 4;
                case Format.R32_UInt:
                    return 4;
                case Format.R8G8B8A8_SInt:
                    return 4;
                case Format.R8G8B8A8_SNorm:
                    return 4;
                case Format.R8G8B8A8_Typeless:
                    return 4;
                case Format.R8G8B8A8_UInt:
                    return 4;
                case Format.R8G8B8A8_UNorm:
                    return 4;
                case Format.R8G8B8A8_UNorm_SRgb:
                    return 4;
                case Format.R8G8_B8G8_UNorm:
                    return 4;
                case Format.R8G8_SInt:
                    return 2;
                case Format.R8G8_SNorm:
                    return 2;
                case Format.R8G8_Typeless:
                    return 2;
                case Format.R8G8_UInt:
                    return 2;
                case Format.R8G8_UNorm:
                    return 2;
                case Format.R8_SInt:
                    return 1;
                case Format.R8_SNorm:
                    return 1;
                case Format.R8_Typeless:
                    return 1;
                case Format.R8_UInt:
                    return 1;
                case Format.R8_UNorm:
                    return 1;
                case Format.R9G9B9E5_Sharedexp:
                    return 4;
                case Format.X24_Typeless_G8_UInt:
                    return 4;
                case Format.X32_Typeless_G8X24_UInt:
                    return 4;
                default:
                    return -128;
            }
        }
    }
}
