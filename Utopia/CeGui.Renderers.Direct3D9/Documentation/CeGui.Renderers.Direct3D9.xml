<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CeGui.Renderers.Direct3D9</name>
    </assembly>
    <members>
        <member name="T:CeGui.Renderers.Direct3D9.D3D9Renderer">
            <summary>Renders GUIs using managed DirectX 2.0 on DirectX 9.0c</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.VertexBatchSize">
            <summary>The size of a single vertex batch</summary>
            <remarks>
              The optimal size is entirely dependent on the generation of video card used
              and should not be hardcoded for ideal performance. However, there isn't
              really that much to gain besides a huge increase in complexity, so we'll use
              a well-working default size.
            </remarks>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.VertexBatchCount">
            <summary>Number of vertex batches in vertex buffer</summary>
            <remarks>
              Because modern video hardware has the freedom to render multiple frames ahead
              it is not a good idea to lock and overwrite the same vertex buffer repeatedly.
              Instead of always locking the vertex buffer in discard mode, we accumulate
              vertices until the end of the vertex buffer is reached. Only then a single
              lock in discard mode is done.
            </remarks>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32)">
            <summary>Initializes the D3D9 renderer</summary>
            <param name="d3dDevice">Direct3D device that will be used for rendering</param>
            <param name="maxQuads">
              Maximum number of quads that the Renderer will be able to render per frame
            </param>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.createVertexBuffer">
            <summary>Creates the vertex buffer for the renderer</summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.PreD3DReset">
            <summary>
              Direct3D support method that must be called prior to a Reset() call
              on the Direct3D device
            </summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.PostD3DReset">
            <summary>
              Direct3D support method that must be called after a Reset() call on the
              Direct3D device
            </summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.AddQuad(CeGui.Rect,System.Single,CeGui.Texture,CeGui.Rect,CeGui.ColourRect,CeGui.QuadSplitMode)">
            <summary>Add a quad to the rendering queue</summary>
            <remarks>
              All clipping and other adjustments should have been made prior to calling this
            </remarks>
            <summary>Add a quad to the rendering queue (or render immediately)</summary>
            <param name="destRect">Coordinates at which to draw the quad, in pixels</param>
            <param name="z">Z coordinate at which to draw the quad</param>
            <param name="texture">Texture containing the bitmap to draw onto the quad</param>
            <param name="textureRect">
              Region within the texture to be drawn onto the quad, in texture coordinates
            </param>
            <param name="colors">Vertex colors for each of the 4 corners</param>
            <param name="quadSplitMode">Where to split the quad into 2 triangles</param>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.DoRender">
            <summary>Perform final rendering for all quads that have been queued</summary>
            <remarks>
              The contents of the rendering queue is retained and can be rendered again as required.
              If the contents is not required call <see cref="M:CeGui.Renderers.Direct3D9.D3D9Renderer.ClearRenderList"/>
            </remarks>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.ClearRenderList">
            <summary>Clears all queued quads from the render queue</summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.generateQuadVertices(Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured[],System.Int32,CeGui.Rect,System.Single,CeGui.Rect,CeGui.ColourRect,CeGui.QuadSplitMode)">
            <summary>Generates the vertices for a single quad in the internal vertex array</summary>
            <param name="target">Array into which to write the quad</param>
            <param name="startIndex">Start index within the internal vertex array</param>
            <param name="destRect">Rectangle at which the quad will be drawn</param>
            <param name="z">Desired z coordinate of the vertices</param>
            <param name="textureRect">Texture coordinates of the texture region to use</param>
            <param name="colors">Vertex colors at the 4 corners of the quad</param>
            <param name="quadSplitMode">How to divide the quad into triangles</param>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.updateVertexBuffer">
            <summary>Writes the current vertex list into the vertex buffer</summary>
            <remarks>
              <para>
                Normally, updating the vertex buffer can be a costly operation because AGP
                memory needs to the locked and written into. Also, if you lock a vertex buffer,
                Direct3D would have to wait until the graphics card is finished drawing the
                current contents of the vertex buffer before granting access to modify it.
              </para>
              <para>
                Locking with the 'Discard' flag actually tells Direct3D to create a new
                vertex buffer that will be available for writing immediately. The old vertex
                buffer is deleted as soon as the graphics card has finished drawing its vertices.
              </para>
            </remarks>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.CreateTexture">
            <summary>Creates a 'null' Texture object</summary>
            <returns>
              A newly created Texture object. The returned Texture object has no size
              or imagery associated with it, and is generally of little or no use.
            </returns>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.CreateTexture(System.Single)">
            <summary>
              Create a Texture object with the given pixel dimensions as specified by
              <paramref name="size"/>
            </summary>
            <remarks>
              Textures are always created with a size that is a power of 2. If you specify a
              size that is not a power of two, the final	sizef will be rounded up. So if you
              specify a size of 1024, the texture will be (1024 x 1024), however, if you
              specify a size of 1025, the texture will be (2048 x 2048). You can check the
              ultimate size by querying the texture after creation.
            </remarks>
            <param name="size">
              Float value that specifies the size to use for the width and height when creating
              the new texture
            </param>
            <returns>
              A newly created Texture object. The initial contents of the texture memory are
              undefined / random
            </returns>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.CreateTexture(System.String,System.String)">
            <summary>
              Create a <see cref="T:CeGui.Texture"/> object using the given image file name.
            </summary>
            <remarks>
              Textures are always created with a size that is a power of 2. If the file
              you specify is of a size that is not a power of two, the final size will be
              rounded up. Additionally, textures are always square, so the ultimate size
              is governed by the larger of the width and height of the specified file. You
              can check the ultimate sizes by querying the texture after creation.
            </remarks>
            <param name="filename">
              The path and filename of the image file to use when creating the texture
            </param>
            <param name="resourceGroup">
              Resource group identifier to be passed to the resource provider when loading
              the texture file
            </param>
            <returns>
              A newly created Texture object. The initial contents of the texture memory is
              the requested image file
            </returns>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.DestroyAllTextures">
            <summary>Destroy all texture objects</summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.DestroyTexture(CeGui.Texture)">
            <summary>Destroy the given Texture object</summary>
            <param name="texture">Reference to the texture to be destroyed</param>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.d3dDevice">
            <summary>The Direct3D device we're using for rendering</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.vertexBuffer">
            <summary>Primary vertex buffer used for caching primitives</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.textures">
            <summary>List of all textures this renderer has created</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.operations">
            <summary>All vertex batches enqueued for rendering so far</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.currentOperation">
            <summary>Cached reference to the current RenderOperation</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.vertices">
            <summary>Array used to cache geometry for the vertex buffer</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.maxVertices">
            <summary>Maximum number of vertices allowed in the vertex array</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.vertexBufferUpToDate">
            <summary>Whether the vertex buffer is up to date with the vertices array</summary>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.Width">
            <summary>Return the current width of the display in pixels</summary>
            <value>Float value equal to the current width of the display in pixels.</value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.Height">
            <summary>Return the current height of the display in pixels</summary>
            <value>Float value equal to the current height of the display in pixels</value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.Size">
            <summary>Return the size of the display in pixels</summary>
            <value>A size object containing the dimensions of the current display</value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.Rect">
            <summary>Return a <see cref="P:CeGui.Renderers.Direct3D9.D3D9Renderer.Rect"/> describing the screen</summary>
            <value>
              A Rect object that describes the screen area. Typically, the top-left
              values are always 0, and the size of the area described is equal to
              the screen resolution.
            </value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.MaxTextureSize">
            <summary>Return the maximum texture size available</summary>
            <value>
              Size of the maximum supported texture in pixels (textures are always
              assumed to be square)
            </value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.HorizontalScreenDPI">
            <summary>Return the horizontal display resolution dpi</summary>
            <value>Horizontal resolution of the display in dpi</value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.VerticalScreenDPI">
            <summary>Return the vertical display resolution dpi</summary>
            <value>Vertical resolution of the display in dpi</value>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Renderer.D3DDevice">
            <summary>The Direct3D device used by the renderer</summary>
        </member>
        <member name="T:CeGui.Renderers.Direct3D9.D3D9Renderer.RenderOperation">
            <summary>Queueable rendering operation</summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Renderer.RenderOperation.#ctor(System.Int32,Microsoft.DirectX.Direct3D.BaseTexture)">
            <summary>Constructs a textured RenderOperation</summary>
            <param name="startVertex">Starting vertex of the RenderOperation</param>
            <param name="texture">The texture to be selected when rendering</param>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.RenderOperation.StartVertex">
            <summary>First vertex to draw</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.RenderOperation.EndVertex">
            <summary>Vertex after the last vertex to draw</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Renderer.RenderOperation.Texture">
            <summary>Texture to use. Can be null</summary>
        </member>
        <member name="T:CeGui.Renderers.Direct3D9.D3D9Texture">
            <summary>A texture in managed DirectX 2.0 on DirectX 9.0c</summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Texture.#ctor(CeGui.Renderer)">
            <summary>Initializes the texture</summary>
            <param name="owner">Renderer who created this texture.</param>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Texture.PreD3DReset">
            <summary>
              Direct3D support method that must be called prior to a Reset() call
              on the Direct3D device
            </summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Texture.PostD3DReset">
            <summary>
              Direct3D support method that must be called after a Reset() call on the
              Direct3D device
            </summary>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Texture.LoadFromFile(System.String)">
            <summary>Loads a texture from the specified file</summary>
            <param name="fileName">Name of the image file to load</param>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Texture.LoadFromMemory(System.IO.Stream,System.Int32,System.Int32)">
            <summary>Loads a texture file from a stream (could be in memory)</summary>
            <param name="buffer">Stream holding the image data to load into this texture.</param>
            <param name="bufferWidth">Width of the image data (in pixels).</param>
            <param name="bufferHeight">Height of the image data (in pixels).</param>
        </member>
        <member name="M:CeGui.Renderers.Direct3D9.D3D9Texture.Dispose">
            <summary>Explicitely releases all resources belonging to the instance</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Texture.texture">
            <summary>Reference to our underlying D3D texture</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Texture.device">
            <summary>The device in use by the Renderer who created this texture</summary>
        </member>
        <member name="F:CeGui.Renderers.Direct3D9.D3D9Texture.filename">
            <summary>Filename of the image the texture was loaded from, if any</summary>
        </member>
        <member name="P:CeGui.Renderers.Direct3D9.D3D9Texture.D3DTexture">
            <summary>The Direct3D texture object</summary>
        </member>
    </members>
</doc>
